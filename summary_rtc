SYSFS INTERFACE
---------------

The sysfs interface under /sys/class/rtc/rtcN provides access to various
rtc attributes without requiring the use of ioctls. All dates and times
are in the RTC's timezone, rather than in system time.

date:            RTC-provided date
hctosys:         1 if the RTC provided the system time at boot via the
                 CONFIG_RTC_HCTOSYS kernel option, 0 otherwise
max_user_freq:   The maximum interrupt rate an unprivileged user may request
                 from this RTC.
name:            The name of the RTC corresponding to this sysfs directory
since_epoch:     The number of seconds since the epoch according to the RTC
time:            RTC-provided time
wakealarm:       The time at which the clock will generate a system wakeup
                 event. This is a one shot wakeup event, so must be reset
                 after wake if a daily wakeup is required. Format is either
                 seconds since the epoch or, if there's a leading +, seconds
                 in the future.

IOCTL INTERFACE
---------------

The ioctl() calls supported by /dev/rtc are also supported by the RTC class
framework.  However, because the chips and systems are not standardized,
some PC/AT functionality might not be provided.  And in the same way, some
newer features -- including those enabled by ACPI -- are exposed by the
RTC class framework, but can't be supported by the older driver.

    *   RTC_RD_TIME, RTC_SET_TIME ... every RTC supports at least reading
        time, returning the result as a Gregorian calendar date and 24 hour
        wall clock time.  To be most useful, this time may also be updated.

    *   RTC_AIE_ON, RTC_AIE_OFF, RTC_ALM_SET, RTC_ALM_READ ... when the RTC
        is connected to an IRQ line, it can often issue an alarm IRQ up to
        24 hours in the future.  (Use RTC_WKALM_* by preference.)

    *   RTC_WKALM_SET, RTC_WKALM_RD ... RTCs that can issue alarms beyond
        the next 24 hours use a slightly more powerful API, which supports
        setting the longer alarm time and enabling its IRQ using a single
        request (using the same model as EFI firmware).

    *   RTC_UIE_ON, RTC_UIE_OFF ... if the RTC offers IRQs, it probably
        also offers update IRQs whenever the "seconds" counter changes.
        If needed, the RTC framework can emulate this mechanism.

    *   RTC_PIE_ON, RTC_PIE_OFF, RTC_IRQP_SET, RTC_IRQP_READ ... another
        feature often accessible with an IRQ line is a periodic IRQ, issued
        at settable frequencies (usually 2^N Hz).

In many cases, the RTC alarm can be a system wake event, used to force
Linux out of a low power sleep state (or hibernation) back to a fully
operational state.  For example, a system could enter a deep power saving
state until it's time to execute some scheduled tasks.

Note that many of these ioctls need not actually be implemented by your
driver.  The common rtc-dev interface handles many of these nicely if your
driver returns ENOIOCTLCMD.  Some common examples:

    *   RTC_RD_TIME, RTC_SET_TIME: the read_time/set_time functions will be
        called with appropriate values.

    *   RTC_ALM_SET, RTC_ALM_READ, RTC_WKALM_SET, RTC_WKALM_RD: the
        set_alarm/read_alarm functions will be called.

    *   RTC_IRQP_SET, RTC_IRQP_READ: the irq_set_freq function will be called
        to set the frequency while the framework will handle the read for you
        since the frequency is stored in the irq_freq member of the rtc_device
        structure.  Your driver needs to initialize the irq_freq member during
        init.  Make sure you check the requested frequency is in range of your
        hardware in the irq_set_freq function.  If it isn't, return -EINVAL.  If
        you cannot actually change the frequency, do not define irq_set_freq.

    *   RTC_PIE_ON, RTC_PIE_OFF: the irq_set_state function will be called.

If all else fails, check out the rtc-test.c driver!


<.h>
struct linux_rtc_time {
        int tm_sec;
        int tm_min;
        int tm_hour;
        int tm_mday;
        int tm_mon;
        int tm_year;
        int tm_wday;
        int tm_yday;
        int tm_isdst;
};


<hwclock.c>
#include <linux/rtc.h>

        retval = ioctl(fd, RTC_RD_TIME, &rtc_tm);

