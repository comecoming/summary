1.管理帧

有线通信和无线通信的最大区别是什么？那就是有没有用网线！有线客户端如果想连接某个网络，只要将网线接到对应的路由器上就好了，但是无线客户端想完成这个“接入”动作应该怎么办呢？这就需要管理帧的帮忙，管理帧的主要工作就是管理无线客户端的接入和断开。有线连接并不太需要管理帧的帮忙，插拔网线的动作也很简单，但是无线接入却复杂得多。管理帧是不带上层payload信息的，但是它携带一些固定大小的Information felds和可变大小的Information elements （IE）。

管理帧主要包括下面这些种类：

Association request
Association response
Reassociation request
Reassociation response
Probe request
Probe response
Beacon
Announcement traffic indication message (ATIM)
Disassociation
Authentication
Deauthentication
Action


2.控制帧

有线通信和无线通信另外一个区别是传输媒介的稳定性，无线因为传输媒介是电磁波，容易受到各种干而变得不稳定，为了保证数据的稳定传输，就需要控制帧的帮忙。控制帧不仅可以控制传输的速率，还可以用来清空通道（CTS/RTS），协商channel(DFS/ACS)和提供单播通知(PS-Poll/ACK)等功能。

Power Save Poll (PS-Poll)
Request to send (RTS)
Clear to send (CTS) 
Acknowledgment (ACK)
Contention Free-End (CF-End)
CF-End + CF+ACK
Block ACK Request (BlockAckReq)
Block ACK (BlockAck)



3.数据帧

在802.11协议中，大部分数据帧都是通过携带MSDU来传输数据的，当然有一些特殊用途的空帧不会携带MSDU（比如用来通知power save status的帧），所以传输时不会对它进行加密。一般来说，控制帧、管理帧和空的数据帧都是不需要加密的。数据帧的类型主要包括下面这些：

Data (simple data frame)
Null function (no MSDU payload)
Data + CF-ACK
Data + CF-Poll
Data + CF-ACK + CF-Poll
CF-ACK (no MSDU payload)
CF-Poll (no MSDU payload)
CF-ACK + CF-Poll (no MSDU payload)
QoS data
QoS Null (no MSDU payload)
QoS data + CF-ACK
QoS data + CF-Poll
QoS data + CF-ACK + CF-Poll
QoS CF-Poll (no MSDU payload)

QoS CF-ACK + CF-Poll (no MSDU payload) 
--------------------- 
作者：奔跑的路 
来源：CSDN 
原文：https://blog.csdn.net/lee244868149/article/details/53239267 
版权声明：本文为博主原创文章，转载请附上博文链接！











anyka 调试8188eus
question1
ATHENA底板上使用8188CUS做AP，其它WIFI设备连接时出现连接后立即断开，或者不断重连，重启开发板依旧；
WIFI未使用独立电源供电，使用过程中瞬时电流可能达1A，造成不稳定；
AK MP5板不接电池，只用USB供电时，开机打开WIFI时开发板重启；
万臣IPC用USB供电，部分板在进行礼帽尖传输时重启；

question2
8188CUS做AP时，部分苹果设备连接时获取IP失败；
DHCP服务器不用busybox的udhcpd，更换为dhcpd即可；

question3
win7连AK的AP设置为家庭网络后，再次连接时需重新识别风络位置；
DHCP服务器不用busybox的udhcpd，更换为dhcpd即可；

question4
AP启动后其它设备首次连接失败；
hostapd所需要的强随机数通过系统中断来产生，系统启动后中断次数不够时则无法产生需要的随机数，导致网络连接失败；
在hostapd中打开锡耶纳要吃饭选项CONFIG_NO_RANDOM_POOL=y，通过hostapd自身产生随机数；


1.ifconfig wlan0 192.168.1.xxx //update_config
2.route add default gw 192.168.1.1
3.vim /etc/resolv.conf
nameserver 192.168.1.1
4./etc/wpa_supplicant/wpa_supplicant.conf

<wpa_supplicant>
wpa_supplicant -d -Dwext -iwlan0 -c/data/misc/wifi/wpa_supplicant.conf
-d £ºdebug info
-Dwext £ºwext£¬nl80211
-iwlan0 £ºwlan0£¬if name
/system/bin/wpa_supplicant £ºwpa_supplicant path
/data/misc/wifi/wpa_supplicant.conf £ºwpa_supplicant config file path


<wpa_cli>
wpa_cli -iwlan0 -p/data/system/wpa_supplicant
×¢£¬-p/data/system/wpa_supplicantÖÐµÄwpa_supplicant²¢²»ÊÇ¿ÉÖ´ÐÐ³ÌÐò£¬¶øÊÇ¸ö¿ØÖÆÌ×½Ó×Ö

status	stat	displays the current connection status

disconnect	disc	prevents wpa_supplicant from connecting to any access point

quit	q	exits wpa_cli

terminate	term	kills wpa_supplicant

reconfigure	recon	reloads wpa_supplicant with the configuration file supplied (-c parameter)

scan	scan	scans for available access points (only scans it, doesn't display anything)

scan_result	scan_r	displays the results of the last scan

list_networks	list_n	displays a list of configured networks and their status (active or not, enabled or disabled)

select_network	select_n	select a network among those defined to initiate a connection (ie select_network 0)

enable_network	enable_n	makes a configured network available for selection (ie enable_network 0)

disable_network	disable_n	makes a configured network unavailable for selection (ie disable_network 0)

remove_network	remove_n	removes a network and its configuration from the list (ie remove_network 0)

add_network	add_n	adds a new network to the list. Its id will be created automatically

set_network	set_n	shows a very short list of available options to configure a network when supplied with no parameters.

get_network	get_n	displays the required parameter for the specified network. See next section for a list of parameters

save_config	save_c	saves the configuration

eg.0 
	set_network <network id> <key> <parameter> [<parameter>]
	get_network <network id> <key>

eg.1¡¢Á¬½ÓÎÞ¼ÓÃÜµÄAP
>add_network  (It will display a network id for you, assume it returns 0)
>set_network 0 ssid "666"
>set_network 0 key_mgmt NONE
>enable_network 0
>quit
eg.2¡¢Á¬½ÓWEP¼ÓÃÜAP
>add_network   (assume return 1)
>set_network 1 ssid "666"
>set_network 1 key_mgmt NONE
>set_network 1 wep_key0 "your ap password"
>enable_network 1
eg.3¡¢Á¬½ÓWPA-PSK/WPA2-PSK¼ÓÃÜµÄAP
>add_network   (assume return 2)
>set_network 2 ssid "666"
>set_network 2 psk "your pre-shared key"
>enable_network 2

wpa_supplicant.conf
eg1. 
ctrl_interface=DIR=/data/system/wpa_supplicant GROUP=system update_config=1
network={
ssid="my access point"
proto=WPA
key_mgmt=WPA-PSK
psk="you pass words"
}

ctrl_interface=/var/run/wpa_supplicant  
ctrl_interface_group=wheel  
update_config=1  
  
eg2
network={  
    ssid="xxxx"  
    scan_ssid=1  //hiden ssid
    psk=xxxxxxxxx37bca5cf24a345f514d319211822f568bba28f8f0b74c894e7644  //password from wpa_passphrase
    proto=RSN  //WPA = WPA/IEEE 802.11i/D3.0
				//RSN = WPA2/IEEE 802.11i (also WPA2 can be used as an alias for RSN)
    key_mgmt=WPA-PSK  //WPA-PSK = WPA pre-shared key (this requires 'psk' field)
						//WPA-EAP = WPA using EAP authentication
						//NONE = WPA is not used; plaintext or static WEP could be used
    pairwise=CCMP  //CCMP = AES in Counter mode with CBC-MAC [RFC 3610, IEEE 802.11i/D7.0]  ---¿´µ½Ã»£¬Õâ¸ö¾ÍÊÇAES£¬»»ÁËÂí¼×¶øÒÑ  
					//TKIP = Temporal Key Integrity Protocol [IEEE 802.11i/D7.0] ---TKIP Õâ¸öµ¹ÊÇÃ»±ä  
					//NONE = Use only Group Keys (deprecated, should not be included if APs support  pairwise keys)   ---Õâ¸ö¹À¼ÆºÜÉÙÓÃ  
# If not set, this defaults to: CCMP TKIP  ---²»ÉèÖÃµÄ»°ÊÇCCMP TKIP£¬¿´ËÆÕýÈ·£¬ÆäÊµÓÐÐ©Â·ÓÉÆ÷ÎÞ·¨×Ô¶¯Ê¶±ð£¬Ö»ÄÜ¶þÑ¡Ò»£¬ºÜ¿Óµù¡£ 
    auth_alg=OPEN  
}  

Key	Description	Parameters
ssid	Access point name	string
id_str	String identifying the network	string
priority	Connection priority over other APs	number (0 being the default low priority)
bssid	Mac address of the access point	mac address
scan_ssid	Enable/disbale ssid scan	0, 1, 2
key_mgmt	Type of key management	WPA-PSK, WPA_EAP, None
pairwise	Pairwise ciphers for WPA	CCMP, TKIP
group=TKIP	Group ciphers for WPA	CCMP, TKIP, WEP104, WEP40
psk	Pre-Shared Key (clear or encrypted)	string
wep_key0	WEP key (up to 4: wep_key[0123])	string
eap	Extensible Authentication Protocol	MD5, MSCHAPV2, OTP, GTC, TLS, PEAP, TTLS
identity	EAP identity string	string
password	EAP password	string
ca_cert	Pathname to CA certificate file	/full/path/to/certificate
client_cert	Pathname to client certificate	/full/path/to/certificate (PEM/DER)
private_key	Pathname to a client private key file	/full/path/to/private_key (PEM/DER/PFX)

