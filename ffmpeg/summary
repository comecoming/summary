ffmpeg -re -i pooh_and_tiger.f4v -an -c copy -f rtp rtp://127.0.0.1:10086
ffplay -protocol_whitelist "file,udp,rtp" test.sdp

ffmpeg -h encoder=libx264




[hack]
FFmpeg添加codec的步骤：(以wma为例) 
1. 在libavcodec/avcodec.h 的CodecID 枚举中添加wma的codec id 比如    
CODEC_ID_WMAV1 2. 在libavcodec/allcodecs.c的avcodec_register_all()函数中添加wma 解码器的注册比如：    
REGISTER_ENCDEC(WMAV1, wmav1); 3. 在libavformat/xxx.c文件中添加对于可包含wma数据的文件格式对于wmav1的识别；（此
处的实现并不唯一，具体可参见ff_codec_wav_tags） 4. 创建wma.c 文件并实现 init, close, decode, flush函数，并定义一个AVCodec 变量，比如： 
AVCodec wmav1_decoder = { 
    "wmav1",    //name 
    AVMEDIA_TYPE_AUDIO, 
    CODEC_ID_WMAV1, //codec id 
    sizeof(WMACodecContext), //wma 结构体     wma_decode_init,   // init 函数入口     NULL, 
    ff_wma_end,   
 
//close 函数入口 
    wma_decode_superframe,  // decode 函数入口     .flush=flush,  //flush 函数入口 }; 
 
针对目前将wma,aac, mp3等定点解码库替换FFmpeg现有的实现，只需要重新实现init,close,decode,flush函数，实现的具体方法与各个定点解码库现有的实现有关，只要保证对传递的AVCodecContext类型的参数做正确的处理即可。
————————————————
通过修改libavcodec/allcodecs.c文件实现，修改如下：

REGISTER_ENCDEC (ASV1,asv1);
REGISTER_ENCDEC (S3CX264,s3cx264);//添加s3cx264编解码器
这样，在程序运行时调用 av_register_all(void) 函数后(fang: 新的ffmpeg已经将 codec_list 以全局静态数组的形式存放在 codec_list.c 中,不是运行时动态注册了)，就可以把自定义的编解码器s3cx264添加到FFmpeg存放在内存中的解编码器链中。
————————————————






[build]
cd x264-master;./configure --disable-asm --enable-shared;make;make install
cd ffmpeg-4.2.2;./configure --disable-yasm --enable-gpl --enable-libx264
--enable-shared --disable-static//默认装静态库

./configure --list-encoders
./configure --list-decoders
./configure --list-muxers
./configure --list-demuxerss
./configure --list-protocols
./configure --help ----->External library support,第三方外部库，除标有[autodetect]的能自动检查，要显式enable编译


[ffmpeg]
ffmpeg -h full
ffmpeg -buildconf
ffmpeg -formats
ffmpeg -muxers
ffmpeg -codecs
ffmpeg -encoders
ffmpeg -protocols
ffmpeg -filters

ffmpeg -h filter=drmeter
ffmpeg -h muxer=rtp
ffmpeg -h encoder=libx264

x264 --full help
ffmpeg -i input.mp4 -vn -acodec copy output.acc//抽取音频流
ffmpeg -i input.mp4 -vcodec copy -an output.h264//抽取视频流
ffmpeg -i input.mp4 -vcodec copy -an -bsf hevc_mp4toannexb -f hevc output.hevc//抽取视频流
ffmpeg -i input.mp4 -vcodec libx264 -preset ultrafast -b:v 2000k output.mp4

//不同profile
ffmpeg -i input.mp4 -vcodec libx264 -profile:v baseline -level 3.1 -s 352x288 -an -y -t 10 output_baseline.ts
ffmpeg -i input.mp4 -vcodec libx264 -profile:v high -level 3.1 -s 352x288 -an -y -t 10 output_high.ts

//控制GOP
ffmpeg -i input.mp4 -c:v libx264 -g 50 output.mp4
//控制GOP,去掉切换场景强插的关键帧
ffmpeg -i input.mp4 -c:v libx264 -g 50 -sc_threshold 0 output.mp4

//录制rtmp推流
ffmpeg -rtmp_app live -i rtmp://publish.chinaffmpeg.com -c copy -f flv output.flv
//rtmp推流
ffmpeg -re -i input.mp4 -c copy -f flv -rtmp_app live rtmp://publish.chinaffmpeg.com

//rtsp拉流
ffmpeg -rtsp_transport tcp -i rtsp://10.10.100.254/test.ts -c copy -f mp4 output.mp4



./ffmpeg -t 10 -f video4linux2 -s 176*144 -r 8 -i /dev/video0 -vcodec h263 -f rtp rtp://192.168.1.105:5060 >
/tmp/ffmpeg.sdp
以上命令表示：采集10 秒钟视频，对video4linux2 视频设备进行采集，采集QCIF(176*144)的视频，每秒8 帧，
视频设备为/dev/video0，视频编码为h263，输出格式为RTP，后面定义了IP 地址及端口，将该码流所对应的SDP
文件重定向到/tmp/ffmpeg.sdp 中，将此SDP 文件上传到流媒体服务器就可以实现直播了。



ffmpeg 命令集举例
1.获取视频的信息
ffmpeg -i video.avi
2.将图片序列合成视频
ffmpeg -f image2 -i image%d.jpg video.mpg
上面的命令会把当前目录下的图片（名字如：image1.jpg. image2.jpg. 等...）合并成video.mpg
3.将视频分解成图片序列
ffmpeg -i video.mpg image%d.jpg
上面的命令会生成image1.jpg. image2.jpg. ...
支持的图片格式有：PGM. PPM. PAM. PGMYUV. JPEG. GIF. PNG. TIFF. SGI
4.为视频重新编码以适合在iPod/iPhone 上播放
ffmpeg -i source_video.avi input -acodec aac -ab 128kb -vcodec mpeg4 -b 1200kb -mbd 2 -flags +4mv+trell -aic 2
-cmp 2 -subcmp 2 -s 320x180 -title X final_video.mp4
说明：
* 源视频：source_video.avi
* 音频编码：aac
* 音频位率：128kb/s
* 视频编码：mpeg4
* 视频位率：1200kb/s
* 视频尺寸：320 X 180
* 生成的视频：final_video.mp4
5.为视频重新编码以适合在PSP 上播放
ffmpeg -i source_video.avi -b 300 -s 320x240 -vcodec xvid -ab 32 -ar 24000 -acodec aac final_video.mp4
说明：
* 源视频：source_video.avi
* 音频编码：aac
* 音频位率：32kb/s
* 视频编码：xvid
* 视频位率：1200kb/s
* 视频尺寸：320 X 180
* 生成的视频：final_video.mp4
6.从视频抽出声音.并存为Mp3
ffmpeg -i source_video.avi -vn -ar 44100 -ac 2 -ab 192 -f mp3 sound.mp3
说明：
* 源视频：source_video.avi
* 音频位率：192kb/s
* 输出格式：mp3
* 生成的声音：sound.mp3
7.将wav 文件转成Mp3
ffmpeg -i son_origine.avi -vn -ar 44100 -ac 2 -ab 192 -f mp3 son_final.mp3
8.将.avi 视频转成.mpg
ffmpeg -i video_origine.avi video_finale.mpg
9.将.mpg 转成.avi
ffmpeg -i video_origine.mpg video_finale.avi
10.将.avi 转成gif 动画（未压缩）
ffmpeg -i video_origine.avi gif_anime.gif
11.合成视频和音频
ffmpeg -i son.wav -i video_origine.avi video_finale.mpg
12.将.avi 转成.flv
ffmpeg -i video_origine.avi -ab 56 -ar 44100 -b 200 -r 15 -s 320x240 -f flv video_finale.flv
13.将.avi 转成dv
ffmpeg -i video_origine.avi -s pal -r pal -aspect 4:3 -ar 48000 -ac 2 video_finale.dv
或者：
ffmpeg -i video_origine.avi -target pal-dv video_finale.dv
14.将.avi 压缩成divx
ffmpeg -i video_origine.avi -s 320x240 -vcodec msmpeg4v2 video_finale.avi
15.将Ogg Theora 压缩成Mpeg dvd
ffmpeg -i film_sortie_cinelerra.ogm -s 720x576 -vcodec mpeg2video -acodec mp3 film_terminate.mpg
16.将.avi 压缩成SVCD mpeg2
NTSC 格式：
ffmpeg -i video_origine.avi -target ntsc-svcd video_finale.mpg
PAL 格式：
ffmpeg -i video_origine.avi -target pal-svcd video_finale.mpg
17.将.avi 压缩成VCD mpeg2
NTSC 格式：
ffmpeg -i video_origine.avi -target ntsc-vcd video_finale.mpg
PAL 格式：
ffmpeg -i video_origine.avi -target pal-vcd video_finale.mpg
18.多通道编码
ffmpeg -i fichierentree -pass 2 -passlogfile ffmpeg2pass fichiersortie-2
19.从flv 提取mp3
ffmpeg -i source.flv -ab 128k dest.mp3





截取一张352x240尺寸大小的，格式为jpg的图片
ffmpeg -i test.asf -y -f image2 -t 0.001 -s 352x240 a.jpg
把视频的前３０帧转换成一个Animated Gif
ffmpeg -i test.asf -vframes 30 -y -f gif a.gif
截取指定时间的缩微图
ffmpeg -i test.avi -y -f image2 -ss 8 -t 0.001 -s 350x240 test.jpg
-ss后跟的时间单位为秒
转换文件为3GP格式
ffmpeg -y -i test.mpeg -bitexact -vcodec h263 -b 128 -r 15 -s 176x144 
 -acodec aac -ac 2 -ar 22500 -ab 24 -f 3gp test.3gp
或
ffmpeg -y -i test.wmv -ac 1 -acodec libamr_nb -ar 8000 -ab 12200 -s 176x144 -b 128 -r 15 test.3gp





转换指定格式文件到FLV格式
ffmpeg.exe -i test.mp3 -ab 56 -ar 22050 -b 500 -r 15 -s 320x240 f:\test.flv 
ffmpeg.exe -i test.wmv -ab 56 -ar 22050 -b 500 -r 15 -s 320x240 f:\test.flv
转码解密的VOB
ffmpeg -i snatch_1.vob -f avi -vcodec mpeg4 -b 800 -g 300 -bf 2 -acodec mp3 -ab 128 snatch.avi
上面的命令行将vob的文件转化成avi文件，mpeg4的视频和mp3的音频。注意命令中使用了B帧，所以mpeg4流是divx5兼容的。GOP大小是300意味着29.97帧频下每10秒就有INTRA帧。该映射在音频语言的DVD转码时候尤其有用。
同时编码到几种格式并且在输入流和输出流之间建立映射
ffmpeg -i /tmp/a.wav -ab 64 /tmp/a.mp2 -ab 128 /tmp/b.mp2 -map 0:0 -map 0:0
上面的命令行转换一个64Kbits 的a.wav到128kbits的a.mp2 ‘-map file:index’在输出流的顺序上定义了哪一路输入流是用于每一个输出流的。
转换文件为3GP格式
ffmpeg -i test.avi -y -b 20 -s sqcif -r 10 -acodec amr_wb -ab 23.85 -ac 1 -ar 16000 test.3gp
注：如果要转换为3GP格式，则ffmpeg在编译时必须加上–enable-amr_nb –enable-amr_wb，详细内容可参考：转换视频为3GPP格式
转换文件为MP4格式（支持iPhone/iTouch）
ffmpeg  -y  -i input.wmv  -f mp4 -async 1-s 480x320  -acodec libfaac -vcodec libxvid  -qscale 7 -dts_delta_threshold 1 output.mp4
ffmpeg  -y  -i source_video.avi input -acodec libfaac -ab 128000 -vcodec mpeg4 -b 1200000 -mbd 2 -flags +4mv+trell -aic 2 -cmp 2 -subcmp 2 -s 320x180 -title X final_video.mp4
将一段音频与一段视频混合
ffmpeg -i son.wav -i video_origine.avi video_finale.mpg
将一段视频转换为DVD格式
ffmpeg -i source_video.avi -target pal-dvd -ps 2000000000 -aspect 16:9 finale_video.mpeg
注：target pal-dvd : Output format ps 2000000000 maximum size for the output file, in bits (here, 2 Gb) aspect 16:9 : Widescreen
转换一段视频为DivX格式
ffmpeg -i video_origine.avi -s 320x240 -vcodec msmpeg4v2 video_finale.avi
Turn X images to a video sequence
ffmpeg -f image2 -i image%d.jpg video.mpg
注：This command will transform all the images from the current directory (named image1.jpg, image2.jpg, etc...) to a video file named video.mpg.
Turn a video to X images
ffmpeg -i video.mpg image%d.jpg
注：This command will generate the files named image1.jpg, image2.jpg, ...
The following image formats are also availables : PGM, PPM, PAM, PGMYUV, JPEG, GIF, PNG, TIFF, SGI.




使用ffmpeg录像屏幕
ffmpeg -vcodec mpeg4 -b 1000 -r 10 -g 300 -vd x11:0,0 -s 1024x768 ~/test.avi
：其中，-vd x11:0,0 指录制所使用的偏移为 x=0 和 y=0，-s 1024×768 指录制视频的大小为 1024×768。录制的视频文件为 test.avi，将保存到用户主目录中

如果你只想录制一个应用程序窗口或者桌面上的一个固定区域，那么可以指定偏移位置和区域大小。使用xwininfo -frame命令可以完成查找上述参数。
 

重新调整视频尺寸大小
ffmpeg -vcodec mpeg4 -b 1000 -r 10 -g 300 -i ~/test.avi -s 800×600 ~/test-800-600.avi
注：ffmpeg的屏幕录制功能只能在Linux环境下有效。






[ffprobe]
ffprobe -show_format output.mp4
ffprobe -show_frames input.flv
ffprobe -show_packets input.flv
ffprobe -show_data -show_packets input.flv
ffprobe -show_streams output.mp4

ffprobe -of xml -show_streams input.flv
//xml, ini, json, csv(excel), flat

ffprobe -show_frames -select_streams v
//只看音频a,视频v，字幕s

ffprobe -v quiet -show_frames -select_streams v output_baseline.ts

[ffplay]
ffplay -showmode 1 output.mp3
ffplay -debug vis_mb_type output.mp4//宏块显示
ffplay -vismv pf output.mp4//运动向量显示
pf，p帧前向 bf，b帧前向 bb，b帧后向

ffplay -flags2 +export_mvs output.mp4 -vf codecview=mv=pf+bf+bb